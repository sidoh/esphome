remote_transmitter:
  id: transmitter
  pin: $transmit_pin
  carrier_duty_percent: 50%

remote_receiver:
  pin: 
    number: D5
    inverted: true
    mode: INPUT_PULLUP
  tolerance: 
    type: percentage
    value: 10
  on_raw:
    then:
      - lambda: |-
          id(mqtt_client).publish_json("esphome/ir/receive/raw", [=](JsonObject root) {
            root["client"] = App.get_name();
            JsonArray data = root.createNestedArray("payload");
            for (int32_t v : x) {
              data.add(v);
            }
          });
  on_pronto:
    then:
      - lambda: |-
          id(mqtt_client).publish_json("esphome/ir/receive/pronto", [=](JsonObject root) {
            root["client"] = App.get_name();
            root["payload"] = x.data;
          });
  on_nec:
    then:
      - lambda: |-
          id(mqtt_client).publish_json("esphome/ir/receive/nec", [=](JsonObject root) {
            root["client"] = App.get_name();
            JsonObject payload = root.createNestedObject("payload");
            payload["address"] = x.address;
            payload["command"] = x.command;
            payload["command_repeats"] = x.command_repeats;
          });

mqtt:
  <<: !include .mqtt.yaml
  on_json_message:
    topic: esphome/ir/send
    then:
      - lambda: |-
          ESP_LOGI("transmit_mqtt", "Received message on send topic");

          auto protocol = x["protocol"];
          auto call = id(transmitter).transmit();
          
          if (protocol == "raw") {
            std::vector<int32_t> data;
            JsonArrayConst sentData = x["data"];

            for (JsonVariantConst d : sentData) {
              data.push_back(d.as<int32_t>());
              ESP_LOGI("transmit_mqtt", "Read value %d", d.as<int32_t>());
            }

            call.get_data()->set_data(data);
          } else if (protocol == "pronto") {
            ESP_LOGI("transmit_mqtt", "Received pronto message");

            esphome::remote_base::ProntoData pData;
            pData.data = x["data"].as<const char*>();
            esphome::remote_base::ProntoProtocol().encode(call.get_data(), pData);
          } else if (protocol == "nec") {
            ESP_LOGI("transmit_mqtt", "Received NEC message");

            esphome::remote_base::NECData data{
              x["address"].as<uint16_t>(),
              x["command"].as<uint16_t>(),
              x["command_repeats"].as<uint16_t>(),
            };
            esphome::remote_base::NECProtocol().encode(call.get_data(), data);
          }

          call.set_send_times(x.containsKey("repeat_times") ? x["repeat_times"] : 1);
          call.perform();

<<: !include .common.yaml